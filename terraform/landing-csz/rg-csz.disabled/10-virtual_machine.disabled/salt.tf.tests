# file with some salt-minion tests integration

#create vm windows
resource "azurerm_windows_virtual_machine" "vm-ibs" {
    count                 = var.windows_count
    name                  = "vm-azibsw-0${count.index + 1}"
    location              = var.location
    resource_group_name   = azurerm_resource_group.rg-ibs.name
    #network_interface_ids = [azurerm_network_interface.nic-ibsw.*.id, count.index]
    network_interface_ids = ["${element(azurerm_network_interface.nic-ibsw.*.id, count.index)}", "${element(azurerm_network_interface.nic3-ibsw.*.id, count.index)}"]
    size                  = var.instance_size
    availability_set_id   = azurerm_availability_set.as-ibs.id
    custom_data           = filebase64("./scripts/azure-salt.ps1")

    additional_unattend_content {
      setting = "AutoLogon"
      content = "<AutoLogon><Password><Value>${var.admin_password}</Value></Password><Enabled>true</Enabled><LogonCount>1</LogonCount><Username>${var.admin_username}</Username></AutoLogon>"
    }

    additional_unattend_content {
      setting = "FirstLogonCommands"
      content      = file("${path.module}/scripts/tpl.first_logon_commands.xml")
    }

    os_disk {
        name              = "vm-azibsw-system-${count.index + 1}"
        caching           = "ReadWrite"
        storage_account_type = "Standard_LRS"
    }

    source_image_reference {
        publisher = "MicrosoftWindowsServer"
        offer     = "WindowsServer"
        sku       = "2016-Datacenter"
        version   = "latest"
    }
    
    computer_name  = "vm-azibsw-0${count.index + 1}"
    admin_username = var.admin_username
    admin_password = var.admin_password

    boot_diagnostics {
        storage_account_uri = azurerm_storage_account.sto-ibs.primary_blob_endpoint
    }

    tags = {
        environment = var.environment
        name        = "vm-azibsw-0${count.index + 1}"
        platform = var.platform
        service_group = var.service_group
    }


#  provisioner "local-exec" {
#    command = "echo  '${element(azurerm_public_ip.pip-ibsw.*.ip_address, count.index)}' > /tmp/data"
#  }


#deploy salt-minion
  provisioner "remote-exec" {
    inline = [
     "powershell -command C:\\windows\\temp\\bootstrap-salt.ps1 -master 10.1.2.3 -minion ${format("vm-azibsw-%02d", count.index +1)} -version 3000.3"
    ]
  }

 provisioner "local-exec" {
    #command = "sleep 15 && salt-key -y -a ${azurerm_linux_virtual_machine.vm-ibs.tags.Name}"
    command = "sleep 15 && salt-key -y -a ${format("vm-azibsw-%02d", count.index +1)} && echo '${format("vm-azibsw-%02d", count.index +1)}' >> /tmp/done "
  }

 provisioner "local-exec" {
  when = destroy
  #command = "salt-key -y -d '${aws_instance.ibs-webserver.tags.Name}'"
  command = "salt-key -y -d '${format("vm-azibsw-%02d", count.index +1)}' && echo 'todo ideshecho' > /tmp/done"
 }
}


# create vm linux
resource "azurerm_linux_virtual_machine" "vm-ibs" {
    count                 = var.linux_count
    name                  = "vm-azibsl-0${count.index + 1}"
    location              = var.location
    resource_group_name   = azurerm_resource_group.rg-ibs.name
    #network_interface_ids = [azurerm_network_interface.nic-ibs.*.id, count.index]
    network_interface_ids = ["${element(azurerm_network_interface.nic-ibs.*.id, count.index)}"]
    size                  = var.instance_size
    availability_set_id   = azurerm_availability_set.as-ibs.id
    custom_data           = filebase64("./scripts/azure-salt.sh")

    os_disk {
        name              = "vm-azibsl-system-${count.index + 1}"
        caching           = "ReadWrite"
        storage_account_type = "Premium_LRS"
    }

    source_image_reference {
        publisher = "Canonical"
        offer     = "UbuntuServer"
        sku       = "16.04.0-LTS"
        version   = "latest"
    }

    computer_name  = "vm-ibs"
    admin_username = "azureuser"
    disable_password_authentication = true
        
    admin_ssh_key {
        username       = var.ansible_user
        public_key     = tls_private_key.example_ssh.public_key_openssh
    }

    boot_diagnostics {
        storage_account_uri = azurerm_storage_account.sto-ibs.primary_blob_endpoint
    }

    tags = {
        environment = var.environment
        name        = "vm-azibsl-0${count.index + 1}"
        platform = var.platform
        service_group = var.service_group
    }
  provisioner "local-exec" {
    #command = "sleep 15 && salt-key -y -a ${azurerm_linux_virtual_machine.vm-ibs.tags.Name}"
    command = "sleep 15 && salt-key -y -a ${format("vm-azibsl-%02d", count.index +1)} && echo '${format("vm-azibsl-%02d", count.index +1)}' >> /tmp/done "
  }

 provisioner "local-exec" {
  when = destroy
  #command = "salt-key -y -d '${aws_instance.ibs-webserver.tags.Name}'"
  command = "salt-key -y -d '${format("vm-azibsl-%02d", count.index +1)}' && echo 'todo ideshecho' > /tmp/done"
 }
}

# pruebas
resource "null_resource" "salt-bootstrap" {
  provisioner "local-exec" {
    #command = "sleep 15 && salt-key -y -a ${azurerm_linux_virtual_machine.vm-ibs.tags.Name}"
    command = "sleep 15 && salt-key -y -a ${format("vm-azibsl-%02d", count.index +1)} && echo '${format("vm-azibsl-%02d", count.index +1)}' >> /tmp/done "
  }

 provisioner "local-exec" {
  when = destroy
  #command = "salt-key -y -d '${aws_instance.ibs-webserver.tags.Name}'"
  command = "salt-key -y -d '${format("vm-azibsl-%02d", count.index +1)}' && echo 'todo ideshecho' > /tmp/done"
 }
}
